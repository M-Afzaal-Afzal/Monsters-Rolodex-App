{"version":3,"sources":["components/CardsList/Card/Card.jsx","store/actions/actionTypes.jsx","store/actions/robots.actions.jsx","components/CardsList/CardsList.component.jsx","store/actions/searchValue.action.jsx","theme/theme.js","App.js","reportWebVitals.js","store/reducers/RobotList.reducer.jsx","store/reducers/searchValue.reducer.jsx","index.js"],"names":["useStyles","makeStyles","theme","image","width","height","card","background","palette","primary","light","borderRadius","padding","transform","transition","scale","breakpoints","down","Card","props","classes","Grid","item","xs","sm","md","lg","className","alignItems","container","direction","src","id","alt","Box","mb","Typography","style","color","variant","name","email","FETCH_ROBOTS_START","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAIL","GET_SEARCH_VALUE","fetchRobots","dispatch","type","actionTypes","axios","get","then","response","robots","data","catch","error","fetchRobotsFail","mainGrid","margin","body","CardsList","useSelector","state","robotList","loading","value","input","inputFieldRef","useRef","trim","filter","robot","toLowerCase","includes","useDispatch","useEffect","actions","content","justify","CircularProgress","size","thickness","mt","TextField","onChange","inputValue","current","label","inputRef","spacing","align","map","Container","purple","secondary","createMuiTheme","main","typography","subtitle2","fontSize","h2","fontWeight","letterSpacing","App","ThemeProvider","m","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","Reducer","action","reducer","rootReducer","combineReducers","RobotList","inputReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d1208bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n\treturn {\r\n\t\timage: {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%'\r\n\t\t},\r\n\t\tcard: {\r\n\t\t\tbackground: theme.palette.primary.light,\r\n\t\t\tborderRadius: '5px',\r\n\t\t\tpadding: '3rem',\r\n\t\t\theight: '100%',\r\n\t\t\ttransform: 'scale(1)',\r\n\t\t\ttransition: 'transform .3s',\r\n\t\t\tscale: '1',\r\n\t\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\t\tpadding: '1rem'\r\n\t\t\t},\r\n\t\t\t'&:hover': {\r\n\t\t\t\ttransform: 'scale(1.03)'\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});\r\n\r\nconst Card = (props) => {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t<Grid className={classes.card} alignItems=\"center\" container direction=\"column\">\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName={classes.image}\r\n\t\t\t\t\t\tsrc={`https://robohash.org/${props.id}?set=set2`}\r\n\t\t\t\t\t\talt={`robot-${props.id}`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item>\r\n\t\t\t\t\t<Box mb={2} />\r\n\t\t\t\t\t<Typography style={{ color: 'white' }} variant=\"h6\">\r\n\t\t\t\t\t\t{props.name}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography color=\"secondary\" variant=\"subtitle2\">\r\n\t\t\t\t\t\t{props.email}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","export const FETCH_ROBOTS = 'FETCH_ROBOTS';\r\nexport const FETCH_ROBOTS_START = 'FETCH_ROBOTS_START';\r\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\r\nexport const FETCH_ROBOTS_FAIL = 'FETCH_ROBOTS_FAIL';\r\n\r\nexport const GET_SEARCH_VALUE = 'GET_SEARCH_VALUE';\r\n","import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const fetchRobotsSuccess = (robots) => {\r\n\treturn {\r\n\t\ttype: actionTypes.FETCH_ROBOTS_SUCCESS,\r\n\t\trobots: robots\r\n\t};\r\n};\r\n\r\nexport const fetchRobotsFail = (error) => {\r\n\treturn {\r\n\t\ttype: actionTypes.FETCH_ROBOTS_FAIL,\r\n\t\terror: error\r\n\t};\r\n};\r\n\r\nexport const fetchRobotsStart = () => {\r\n\treturn {\r\n\t\ttype: actionTypes.FETCH_ROBOTS_START\r\n\t};\r\n};\r\n\r\nexport const fetchRobots = () => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(fetchRobotsStart());\r\n\t\taxios\r\n\t\t\t.get('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => {\r\n\t\t\t\tdispatch(fetchRobotsSuccess(response.data));\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tdispatch(fetchRobotsFail(error));\r\n\t\t\t});\r\n\t};\r\n};\r\n","import {Grid} from '@material-ui/core';\r\nimport Card from './Card/Card';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport * as actions from '../../store/actions/index';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {Fragment, useEffect} from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport React from 'react';\r\nimport {Container} from '@material-ui/core';\r\nimport {useRef} from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        mainGrid: {\r\n            padding: '1rem',\r\n            width: '100%',\r\n            margin: 0\r\n        },\r\n        '@global': {\r\n            body: {\r\n                margin: 0\r\n            }\r\n        }\r\n    };\r\n});\r\n\r\nconst CardsList = () => {\r\n    let robots = useSelector((state) => state.robots.robotList);\r\n    const loading = useSelector((state) => state.robots.loading);\r\n    const value = useSelector((state) => state.input.value);\r\n    const inputFieldRef = useRef('');\r\n\r\n    if (value.trim() !== '') {\r\n        robots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(value.toLowerCase());\r\n        });\r\n    }\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(actions.fetchRobots());\r\n    }, []);\r\n\r\n    const valueChangeHandler = () => {\r\n        dispatch(actions.getSearchValue(inputFieldRef.current.value));\r\n    };\r\n\r\n    let content = (\r\n        <Grid container style={{width: '100%', height: '100vh'}} justify=\"center\" alignItems=\"center\">\r\n            <CircularProgress size={100} thickness={6} color=\"secondary\"/>\r\n        </Grid>\r\n    );\r\n\r\n    if (!loading) {\r\n        content = (\r\n            <Fragment>\r\n                <Box mb={3} mt={3}/>\r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <TextField\r\n                        type=\"search\"\r\n                        onChange={valueChangeHandler}\r\n                        id=\"outlined-basic\"\r\n                        label=\"Search Robots\"\r\n                        variant=\"outlined\"\r\n                        inputRef={inputFieldRef}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    className={classes.mainGrid}\r\n                    alignItems=\"stretch\"\r\n                    container\r\n                    spacing={2}\r\n                    align=\"center\"\r\n                    justify=\"center\"\r\n                >\r\n                    {robots.map((robot) => {\r\n                        return <Card key={robot.id} name={robot.name} email={robot.email} id={robot.id}/>;\r\n                    })}\r\n                </Grid>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return <Container>{content}</Container>;\r\n};\r\n\r\nexport default CardsList;\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport const getSearchValue = (inputValue) => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SEARCH_VALUE,\r\n\t\tvalue: inputValue\r\n\t};\r\n};\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport { purple } from '@material-ui/core/colors';\r\nconst primary = purple[500];\r\nconst secondary = '#fee140';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            // Purple and green play nicely together.\r\n            main: primary,\r\n        },\r\n        secondary: {\r\n            // This is green.A700 as hex.\r\n            main: secondary,\r\n        },\r\n    },\r\n    typography: {\r\n        subtitle2: {\r\n            fontSize: '1rem',\r\n            color: secondary,\r\n        },\r\n        h2: {\r\n            fontSize: '2.5rem',\r\n            color: '#764ba2',\r\n            fontWeight: 700,\r\n            letterSpacing: 2\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;","import CardList from './components/CardsList/CardsList.component';\nimport { Box, Typography, Container } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme/theme'\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Box m={8} />\n      <Container maxWidth='lg' align='center'>\n        <Typography variant='h2'>\n          Monsters Rolodex\n      </Typography>\n      </Container>\n      <CardList />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n\trobotList: [],\r\n\terror: null,\r\n\tloading: false\r\n};\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.FETCH_ROBOTS_START:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true\r\n\t\t\t};\r\n\t\tcase actionTypes.FETCH_ROBOTS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\trobotList: action.robots,\r\n\t\t\t\tloading: false\r\n\t\t\t};\r\n\t\tcase actionTypes.FETCH_ROBOTS_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.error,\r\n\t\t\t\tloading: false\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default Reducer;\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n\tvalue: ''\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase actionTypes.GET_SEARCH_VALUE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tvalue: action.value\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport RobotList from './store/reducers/RobotList.reducer';\nimport inputReducer from './store/reducers/searchValue.reducer';\nimport './index.css'\n\nconst rootReducer = combineReducers({\n  robots: RobotList,\n  input: inputReducer,\n\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    {app}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}